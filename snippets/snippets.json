{
  "algorithme": {
    "prefix": ["algorithme"],
    "body": ["algorithme ${1:nom}", "début", "\t$0", "fin"],
    "description": "algorithme"
  },
  "fonction (définition)": {
    "prefix": ["fonction"],
    "body": [
      "fonction ${1:nom}(${2:paramètres_formels}) : ${3|entier,chaîne,réel  ,booléen,caractère|}",
      "début",
      "\t$0",
      "fin"
    ],
    "description": "fonction (définition)"
  },
  "procédure (définition)": {
    "prefix": ["procédure"],
    "body": [
      "procédure ${1:nom}(${2:paramètres_formels})",
      "début",
      "\t$0",
      "fin"
    ],
    "description": "procédure (définition)"
  },
  "boucle pour": {
    "prefix": "pour",
    "body": [
      "pour ${1:i} allant de ${2:0} à ${3:n-1} faire",
      "\t$0",
      "fin_pour"
    ],
    "description": "boucle pour"
  },
  "si...alors": {
    "prefix": "si-alors",
    "body": ["si ${1:conditon} alors", "\t$0", "fin_si"],
    "description": "si...alors"
  },
  "si...alors...sinon": {
    "prefix": "si-sinon",
    "body": ["si ${1:conditon} alors", "\t$0", "sinon", "\t", "fin_si"],
    "description": "si...alors...sinon"
  },
  "boucle tant-que": {
    "prefix": "tant-que",
    "body": ["tant que ${1:condition} faire", "\t$0", "fin_tant_que"],
    "description": "boucle tant que"
  },
  "boucle répéter": {
    "prefix": ["répéter"],
    "body": ["répéter", "\t$0", "jusqu'à  ${1:condition}"],
    "description": "boucle répéter"
  },
  "allant de": {
    "prefix": "allant de",
    "body": ["allant de $0"]
  },
  "début": {
    "prefix": "début",
    "body": ["début $0"]
  },
  "faire": {
    "prefix": "faire",
    "body": ["faire $0"]
  },
  "fin": {
    "prefix": "fin",
    "body": ["fin $0"]
  },
  "fin_pour": {
    "prefix": "fin_pour",
    "body": ["fin_pour $0"]
  },
  "fin_si": {
    "prefix": "fin_si",
    "body": ["fin_si $0"]
  },
  "fin_tant_que": {
    "prefix": "fin_tant_que",
    "body": ["fin_tant_que $0"]
  },
  "jusqu'à": {
    "prefix": "jusqu'à",
    "body": ["jusqu'à $0"]
  },
  "pas": {
    "prefix": "pas",
    "body": ["pas $0"]
  },
  "retourner": {
    "prefix": "retourner",
    "body": ["retourner $0"]
  },
  "sinon": {
    "prefix": "sinon",
    "body": ["sinon $0"]
  },
  "fonction aléa()": {
    "prefix": "aléa",
    "body": ["aléa(${1:vi}, ${2:vf}) $0"],
    "description": "fonction aléa()"
  },
  "fonction arrondi()": {
    "prefix": "arrondi",
    "body": ["arrondi(${1:un_réel}) $0"],
    "description": "fonction arrondi()"
  },
  "fonction chr()": {
    "prefix": "chr",
    "body": ["chr(${1:code_ascii}) $0"],
    "description": "fonction chr()"
  },
  "fonction convch()": {
    "prefix": "convch",
    "body": ["convch(${1:nombre}) $0"],
    "description": "fonction convch()"
  },
  "fonction effacer()": {
    "prefix": "effacer",
    "body": ["effacer(${1:une_chaîne}, ${2:d}, ${3:f_exclue}) $0"],
    "description": "fonction effacer()"
  },
  "fonction ent()": {
    "prefix": "ent",
    "body": ["ent(${1:un_réel}) $0"],
    "description": "fonction ent()"
  },
  "fonction estnum()": {
    "prefix": "estnum",
    "body": ["estnum(${1:une_chaîne}) $0"],
    "description": "fonction estnum()"
  },
  "procédure fermer()": {
    "prefix": "fermer",
    "body": ["fermer(${1:un_fichier}) $0"],
    "description": "procédure fermer()"
  },
  "fonction fin_fichier()": {
    "prefix": "fin_fichier",
    "body": ["fin_fichier(${1:un_fichier}) $0"],
    "description": "fonction fin_fichier()"
  },
  "procédure lire()": {
    "prefix": "lire",
    "body": ["lire(${1:une_var}) $0"],
    "description": "procédure lire()"
  },
  "procédure lire_ligne()": {
    "prefix": "lire_ligne",
    "body": ["lire_ligne(${1:un_fichier}, ${2:une_var}) $0"],
    "description": "procédure lire_ligne()"
  },
  "fonction long()": {
    "prefix": "long",
    "body": ["long(${1:une_chaîne}) $0"],
    "description": "fonction long()"
  },
  "fonction majus()": {
    "prefix": "majus",
    "body": ["majus(${1:une_chaîne}) $0"],
    "description": "fonction majus()"
  },
  "fonction ord()": {
    "prefix": "ord",
    "body": ["ord(${1:un_caractère}) $0"],
    "description": "fonction ord()"
  },
  "procédure ouvrir()": {
    "prefix": "ouvrir",
    "body": ["ouvrir(${1:chemin_fichier}, ${2:nom_var}, \"${3:r}\") $0"],
    "description": "procédure ouvrir()"
  },
  "fonction pointer()": {
    "prefix": "pointer",
    "body": ["pointer(${1:nom_fichier}, ${2:position}) $0"],
    "description": "fonction pointer()"
  },
  "fonction pos()": {
    "prefix": "pos",
    "body": ["pos(${1:ch1}, ${2:ch2}) $0"],
    "description": "fonction pos()"
  },
  "fonction racine_carrée()": {
    "prefix": "racine_carrée",
    "body": ["racine_carrée(${1:un_nombre}) $0"],
    "description": "fonction racine_carrée()"
  },
  "fonction sous_chaîne()": {
    "prefix": "sous_chaîne",
    "body": ["sous_chaîne(${1:une_chaîne}, ${2:d}, ${3:f_exclue}) $0"],
    "description": "fonction sous_chaîne()"
  },
  "fonction taille_fichier()": {
    "prefix": "taille_fichier",
    "body": ["taille_fichier(${1:nom_fichier}) $0"],
    "description": "fonction taille_fichier()"
  },
  "fonction valeur()": {
    "prefix": "valeur",
    "body": ["valeur(${1:une_chaîne}) $0"],
    "description": "fonction valeur()"
  },
  "procédure écrire()": {
    "prefix": "écrire",
    "body": ["écrire(${1:expression}) $0"],
    "description": "procédure écrire()"
  },
  "type booléen": {
    "prefix": "booléen",
    "body": ["booléen$0"]
  },
  "type caractère": {
    "prefix": "caractère",
    "body": ["caractère$0"]
  },
  "type chaîne": {
    "prefix": "chaîne",
    "body": ["chaîne$0"]
  },
  "type enregistrement": {
    "prefix": "enregistrement",
    "body": ["enregistrement$0"]
  },
  "type entier": {
    "prefix": "entier",
    "body": ["entier$0"]
  },
  "type fichier texte": {
    "prefix": "fichier-texte",
    "body": ["fichier texte$0"]
  },
  "type fichier typé": {
    "prefix": "fichier-typé",
    "body": ["fichier allant de ${1:entier}$0"]
  },
  "type réel": {
    "prefix": "réel",
    "body": ["réel$0"]
  },
  "type tableau": {
    "prefix": "tableau",
    "body": ["tableau allant de ${1:20} ${2:entier}$0"]
  },
  "type texte (fichier)": {
    "prefix": "texte",
    "body": ["texte$0"]
  },
  "type fonction": {
    "prefix": "fonction",
    "body": ["fonction $0"]
  },
  "type procédure": {
    "prefix": "procédure",
    "body": ["procédure $0"]
  },
  "opérateur ≥": {
    "prefix": [">="],
    "body": ["≥ $0"],
    "description": "opérateur ≥"
  },
  "opérateur ≤": {
    "prefix": ["<="],
    "body": ["≤ $0"],
    "description": "opérateur ≤"
  },
  "opérateur ≠": {
    "prefix": ["!="],
    "body": ["≠ $0"],
    "description": "opérateur ≠"
  },
  "affectation (<--)": {
    "prefix": ["<--"],
    "body": ["<-- $0"],
    "description": "affectation (<--)"
  },
  "opérateur et": {
    "prefix": "et",
    "body": ["et $0"]
  },
  "opérateur ouex": {
    "prefix": "ouex",
    "body": ["ouex $0"]
  },
  "opérateur ou": {
    "prefix": "ou",
    "body": ["ou $0"]
  },
  "opérateur non": {
    "prefix": "non",
    "body": ["non $0"]
  },
  "opérateur div": {
    "prefix": "div",
    "body": ["div $0"]
  },
  "opérateur mod": {
    "prefix": "mod",
    "body": ["mod $0"]
  },
  "faux": {
    "prefix": "faux",
    "body": ["faux $0"]
  },
  "vrai": {
    "prefix": "vrai",
    "body": ["vrai $0"]
  },
  "saisie contrôlée d'un nombre": {
    "prefix": ["x-saisir-n"],
    "body": [
      "procédure ${1:saisie_nb_eleves}(@${2:n}: entier)",
      "début",
      "\trépéter",
      "\t\técrire(\"${3:Saisir le nombre d'élève:} \") ",
      "\t\tlire(${2:n})",
      "\tjusqu'à  ${6:${2:n} ≥ ${4:5} et ${2:n} ≤ ${5:20}}",
      "fin",
      ""
    ],
    "description": "(proc) saisie contrôlée d'un nombre"
  },
  "remplissage d'un tableau": {
    "prefix": ["x-remp-tab"],
    "body": [
      "procédure ${1:saisie_des_noms}(@${2:T}: ${3:tab_eleves}, ${4:n}:entier)",
      "début",
      "\tpour i allant de 0 à ${4:n}-1 faire",
      "\t\trépéter",
      "\t\t\técrire(\"${5:Nom} n°\", i, \": \") ",
      "\t\t\tlire(${2:T}[i]) ",
      "\t\tjusqu'à  ${6:long(${2:T}[i]) ≠ 0}",
      "\tfin_pour",
      "fin",
      ""
    ],
    "description": "(proc) remplissage contrôlé d'un tableau à une dimension"
  },
  "affichage d'un tableau": {
    "prefix": ["x-aff-tab"],
    "body": [
      "procédure ${1:afficher_noms}(${2:T}: ${3:tab_eleves}, ${4:n}:entier)",
      "début",
      "\tpour i allant de 0 à ${4:n}-1 faire",
      "\t\técrire(\"${5:Nom} n°\", i, \": \", ${2:T}[i])",
      "\tfin_pour",
      "fin",
      "",
      ""
    ],
    "description": "(proc) affichage d'un tableau"
  },
  "remplissage d'une matrice carrée": {
    "prefix": ["x-remp-mat-carrée"],
    "body": [
      "procédure ${1:remplissage_mat}(@${2:T}: ${3:tableau_2d}, ${4:n}:entier)",
      "début",
      "\tpour i allant de 0 à ${4:n}-1 faire",
      "\t\tpour i allant de 0 à ${4:n}-1 faire",
      "\t\t\trépéter",
      "\t\t\t\técrire(\"${2:T}[\", i, \",\", j, \"]: \") ",
      "\t\t\t\tlire(${2:T}[i, j]) ",
      "\t\t\tjusqu'à  ${5:${2:T}[i, j] ≥ 0}",
      "\t\tfin_pour",
      "\tfin_pour",
      "fin",
      "",
      ""
    ],
    "description": "(proc) remplissage contrôlé d'une matrice carrée"
  },
  "remplissage d'une matrice": {
    "prefix": ["x-remp-mat"],
    "body": [
      "procédure ${1:remplissage_mat}(@${2:T}: ${3:tableau_2d}, ${4:nb_lignes}, ${5:nb_colonnes} :entier)",
      "début",
      "\tpour i allant de 0 à ${4:nb_lignes}-1 faire",
      "\t\tpour j allant de 0 à ${5:nb_colonnes}-1 faire",
      "\t\t\trépéter",
      "\t\t\t\técrire(\"${2:T}[\", i, \",\", j, \"]: \") ",
      "\t\t\t\tlire(${2:T}[i, j]) ",
      "\t\t\tjusqu'à  ${6:${2:T}[i, j] ≥ 0}",
      "\t\tfin_pour",
      "\tfin_pour",
      "fin",
      "",
      ""
    ],
    "description": "(proc) remplissage contrôlé d'une matrice"
  },
  "tri à bulles (v.1)": {
    "prefix": ["x-tri-bul-1"],
    "body": [
      "procédure ${1:tri_à_bulles}(@${2:T}: ${3:tab_eleves}, ${4:n}:entier)",
      "début",
      "\trépéter",
      "\t\tpos_dernière_permutation <-- 0",
      "\t\tpour i allant de 1 à ${4:n}-1 faire",
      "\t\t\tsi ${2:T}[i-1] ${5|>,<|} ${2:T}[i] alors",
      "\t\t\t\t${6:kes} <-- ${2:T}[i-1]",
      "\t\t\t\t${2:T}[i-1] <-- ${2:T}[i]",
      "\t\t\t\t${2:T}[i] <-- ${6:kes}",
      "\t\t\t\tpos_dernière_permutation <-- i",
      "\t\t\tfin_si",
      "\t\tfin_pour",
      "\t\t${4:n} <-- pos_dernière_permutation",
      "\tjusqu'à  pos_dernière_permutation ≤ 1",
      "fin",
      "",
      ""
    ],
    "description": "(proc) tri à bulles (v.1)"
  },
  "tri à bulles (v.2)": {
    "prefix": ["x-tri-bul-2"],
    "body": [
      "procédure ${1:tri_à_bulles}(@${2:T}: ${3:tab_eleves}, ${4:n}:entier)",
      "début",
      "\tpour i allant de ${4:n}-1 à 1 (pas = -1) faire",
      "\t\tpour j allant de 1 à i faire",
      "\t\t\tsi ${2:T}[j-1] > ${2:T}[j] alors",
      "\t\t\t\t${5:kes} <-- ${2:T}[j-1]",
      "\t\t\t\t${2:T}[j-1] <-- ${2:T}[j]",
      "\t\t\t\t${2:T}[j] <-- ${5:kes}",
      "\t\t\tfin_si",
      "\t\tfin_pour",
      "\tfin_pour",
      "fin",
      "",
      ""
    ],
    "description": "(proc) tri à bulles (v.2)"
  },
  "tri par sélection (v.1)": {
    "prefix": ["x-tri-sél-1"],
    "body": [
      "procédure ${1:tri_par_sélection}(@${2:T}: ${3:tab_eleves}, ${4:n}:entier)",
      "début",
      "\tpour i allant de 0 à ${4:n}-2 faire",
      "\t\t// recherche allant allant de la position du ${5|min,max|}imum",
      "\t\tpos_${5|min,max|} <-- i",
      "\t\tpour j allant de i+1 à ${4:n}-1 faire",
      "\t\t\tsi ${2:T}[i] ${6|>,<|} ${2:T}[pos_${5|min,max|}] alors",
      "\t\t\t\tpos_${5|min,max|} <-- i",
      "\t\t\tfin_si ",
      "\t\tfin_pour",
      "\t\t",
      "\t\t// permutation allant de la case actuelle (numéro i) avec ",
      "\t\t// la case qui contient le ${5|min,max|}imum (numéro pos_${5|min,max|})",
      "\t\tsi i ≠ pos_${5|min,max|} alors",
      "\t\t\t ${7:kes} <-- ${2:T}[i]",
      "\t\t\t${2:T}[i] <-- ${2:T}[pos_${5|min,max|}]",
      "\t\t\t${2:T}[pos_${5|min,max|}] <--  ${7:kes}",
      "\t\tfin_si",
      "\tfin_pour",
      "fin",
      "",
      ""
    ],
    "description": "(proc) tri par sélection (v.1)"
  },
  "tri par insertion (v.1)": {
    "prefix": ["x-tri-ins-1"],
    "body": [
      "procédure ${1:tri_par_insertion}(@${2:T}: ${3:tab_eleves}, ${4:n}:entier)",
      "début",
      "\tpour i allant de 1 à ${4:n}-1 faire",
      "\t\t// sauvegarder la valeur à insérer",
      "\t\t${5:valeur_à_insérer} <-- ${2:T}[i]",
      "\t\t${6:pos_case_libre} <-- i",
      "\t\t",
      "\t\t// décalage à droite des valeurs, et recherche allant de la position d'insertion",
      "\t\ttant que ${6:pos_case_libre} > 0 et ${2:T}[${6:pos_case_libre} - 1] ${7|>,<|} ${5:valeur_à_insérer} faire",
      "\t\t\t${2:T}[${6:pos_case_libre}] <-- ${2:T}[${6:pos_case_libre} - 1]",
      "\t\t\t${6:pos_case_libre} <-- ${6:pos_case_libre} - 1",
      "\t\tfin_tant_que",
      "\t\t",
      "\t\t// insertion allant de \"${5:valeur_à_insérer}\" à la case libre",
      "\t\t${2:T}[${6:pos_case_libre}] <-- ${5:valeur_à_insérer}",
      "\tfin_pour",
      "fin",
      "",
      ""
    ],
    "description": "(proc) tri par insertion (v.1)"
  },
  "vérif. chaîne alphabétique (v.1)": {
    "prefix": ["x-alpha-1"],
    "body": [
      "fonction ${1:est_alphabetique}(${2:ch}: chaîne) : booléen",
      "début",
      "\t${2:ch} <-- majus(${2:ch})",
      "\ti <-- 0",
      "\ttant que (i < long(${2:ch})) et (${2:ch}[i] ≥ \"A\") et (${2:ch}[i] ≤ \"Z\") faire",
      "\t\ti <-- i + 1",
      "\tfin_tant_que",
      "\t",
      "\tsi i < long(${2:ch}) alors",
      "\t\tretourner faux",
      "\tsinon ",
      "\t\tretourner vrai",
      "\tfin_si",
      "\t// retourner i = long(${2:ch})",
      "fin",
      "",
      ""
    ],
    "description": "(fn) vérif. si une chaîne est composée uniquement par des lettres alphabétiques (v.1)"
  },
  "vérif. chaîne alphabétique (v.2)": {
    "prefix": ["x-alpha-2"],
    "body": [
      "fonction ${1:est_alphabetique}(${2:ch}: chaîne) : booléen",
      "début",
      "\t${2:ch} <-- majus(${2:ch})",
      "\ti <-- -1",
      "\trépéter",
      "\t\ti <-- i + 1",
      "\t\t${3:valide} <-- ${2:ch}[i] ≥ \"A\" et ${2:ch}[i] ≤ \"Z\"",
      "\tjusqu'à  (i ≥ long(${2:ch}))  ou (non ${3:valide})",
      "\tretourner ${3:valide}",
      "fin",
      "",
      ""
    ],
    "description": "(fn) vérif. si une chaîne est composée uniquement par des lettres alphabétiques (v.2)"
  },
  "vérif. chaîne numérique": {
    "prefix": ["x-num"],
    "body": [
      "fonction ${1:est_numérique}(${2:ch}: chaîne) : booléen",
      "début",
      "\tnb_chiffres <-- 0",
      "\tpour i allant de 0 à long(${2:ch}) - 1 faire",
      "\t\tsi (${2:ch}[i] ≥ \"0\") et (${2:ch}[i] ≤ \"9\")  alors",
      "\t\t\tnb_chiffres <-- nb_chiffres + 1",
      "\t\tfin_si",
      "\tfin_pour",
      "",
      "\tsi nb_chiffres = long(${2:ch}) alors",
      "\t\tretourner vrai",
      "\tsinon",
      "\t\tretourner faux",
      "\tfin_si ",
      "\t// retourner nb_chiffres = long(${2:ch}) ",
      "fin",
      ""
    ],
    "description": "(fn) vérif. si une chaîne est composée uniquement par des chiffres"
  },
  "fragment allant de code (py ou js)": {
    "prefix": ["x-code-source"],
    "body": ["```${1|python,javascript|}", "$0", "```"],
    "description": "ajout d'un fragment allant de code en python ou en javascript."
  }
}
